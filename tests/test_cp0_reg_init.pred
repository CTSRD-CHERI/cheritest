#
# Check default CP0 register values are as expected.
#

my $context_reg = $mips_gregs{"a0"};
my $wired_reg = $mips_gregs{"a1"};
my $count_reg = $mips_gregs{"a2"};
my $status_reg = $mips_gregs{"a3"};
my $prid_reg = $mips_gregs{"a4"};
my $config_reg = $mips_gregs{"a5"};
my $xcontext_reg = $mips_gregs{"a6"};

my $context_reg_exp = 0x0;
if ($context_reg != $context_reg_exp) {
	my $string = sprintf("0x%x", $context_reg);
	my $string_exp = sprintf("0x%x", $context_reg_exp);
	return ("Context Register was ".$string.", expected ".$string_exp);
}

my $wired_reg_exp = 0x0;
if ($wired_reg != $wired_reg_exp) {
	my $string = sprintf("0x%x", $wired_reg);
	my $string_exp = sprintf("0x%x", $wired_reg_exp);
	return ("Wired Register was ".$string.", expected ".$string_exp);
}

#
# Hard to know what the count register should be, but we might reasonably
# guess that it's in the range 50 to 600.  This might require tuning, but will
# hopefully detect problems such as "very large number".
#
if ($count_reg < 100 || $count_reg > 600) {
	my $string = sprintf("0x%x", $count_reg);
	return ("Count Register was ".$string."; this is surprising.");
}

#
# We don't yet have a good idea of what all our status bits should be, so
# most are don't cares.  What we do care about is initial user/kernel mode,
# etc, so check them.
#

# Report no coprocessors enabled; CP0 is always available in kernel mode.
my $status_cu = ($status_reg >> 28) & 0x1;
my $status_cu_exp = 0x0;
if ($status_cu != $status_cu_exp) {
	my $string = sprintf("0x%x", $status_cu);
	my $string_exp = sprintf("0x%x", $status_cu_exp);
	return ("Status Register CU was ".$string.", expected ".$string_exp);
}

# We should have interrupts enabled for all sources.
#
# XXX: but we don't.
my $status_im = ($status_reg >> 8) & 0xff;
#my $status_im_exp = 0xff;
my $status_im_exp = 0x2;
if ($status_im != $status_im_exp) {
	my $string = sprintf("0x%x", $status_im);
	my $string_exp = sprintf("0x%x", $status_im_exp);
	return ("Status Register IM was ".$string.", expected ".$string_exp);
}

# We should be in 64-bit kernel mode.
#
# XXX: but we don't.
my $status_kx = ($status_reg >> 7) & 0x1;
#my $status_kx_exp = 1;
my $status_kx_exp = 0;
if ($status_kx != $status_kx_exp) {
	my $string = sprintf("0x%x", $status_kx);
	my $string_exp = sprintf("0x%x", $status_kx_exp);
	return ("Status Register KX was ".$string.", expected ".$string_exp);
}

# We should have a 64-bit supervisor mode.
#
# XXX: but we don't
my $status_sx = ($status_reg >> 6) & 0x1;
#my $status_sx_exp = 1;
my $status_sx_exp = 0;
if ($status_sx != $status_sx_exp) {
	my $string = sprintf("0x%x", $status_sx);
	my $string_exp = sprintf("0x%x", $status_sx_exp);
	return ("Status Register SX was ".$string.", expected ".$string_exp);
}

# We should have a 64-bit user mode.
#
# XXX: but we don't
my $status_ux = ($status_reg >> 5) & 0x1;
#my $status_ux_exp = 1;
my $status_ux_exp = 0;
if ($status_ux != $status_ux_exp) {
	my $string = sprintf("0x%x", $status_ux);
	my $string_exp = sprintf("0x%x", $status_ux_exp);
	return ("Status Register UX was ".$string.", expected ".$string_exp);
}

# We expect to be in kernel mode at init.
my $status_ksu = ($status_reg >> 3) & 0x3;
my $status_ksu_exp = 0;
if ($status_ksu != $status_ksu_exp) {
	my $string = sprintf("0x%x", $status_ksu);
	my $string_exp = sprintf("0x%x", $status_ksu_exp);
	return ("Status Register KSU was ".$string.", expected ".$string_exp);
}

# We expect the error level to be 0 at init.
my $status_erl = ($status_reg >> 2) & 0x1;
my $status_erl_exp = 0;
if ($status_erl != $status_erl_exp) {
	my $string = sprintf("0x%x", $status_erl);
	my $string_exp = sprintf("0x%x", $status_erl_exp);
	return ("Status Register ERL was ".$string.", expected ".$string_exp);
}

# We expect not to be in exception processing.
my $status_exl = ($status_reg >> 1) & 0x1;
my $status_exl_exp = 0;
if ($status_exl != $status_exl_exp) {
	my $string = sprintf("0x%x", $status_exl);
	my $string_exp = sprintf("0x%x", $status_exl_exp);
	return ("Status Register EXL was ".$string.", expected ".$string_exp);
}

# We expect interrupts enabled
#
# XXX: but we don't
my $status_ie = $status_reg & 0x1;
#my $status_ie_exp = 1;
my $status_ie_exp = 0;
if ($status_ie != $status_ie_exp) {
	my $string = sprintf("0x%x", $status_ie);
	my $string_exp = sprintf("0x%x", $status_ie_exp);
	return ("Status Register IE was ".$string.", expected ".$string_exp);
}

# It doesn't really matter what vendor we report as, but we should indicate
# that we are R4400ish
#
# XXX: but we don't
my $prid_imp = ($prid_reg >> 8) & 0xff;
#my $prid_imp_exp = 0x04;
my $prid_imp_exp = 0;
if ($prid_imp != $prid_imp_exp) {
	my $string = sprintf("0x%x", $prid_imp);
	my $string_exp = sprintf("0x%x", $prid_imp_exp);
	return ("PRId Imp was ".$string.", expected ".$string_exp);
}

# XXX
#my $config_reg_exp = 0x0;
#if ($config_reg != $config_reg_exp) {
#	my $string = sprintf("0x%x", $config_reg);
#	my $string_exp = sprintf("0x%x", $config_reg_exp);
#	return ("Config Register was ".$string.", expected ".$string_exp);
#}

# XXX
my $xcontext_reg_exp = 0x0;
if ($xcontext_reg != $xcontext_reg_exp) {
	my $string = sprintf("0x%x", $xcontext_reg);
	my $string_exp = sprintf("0x%x", $xcontext_reg_exp);
	return ("XContext Register was ".$string.", expected ".$string_exp);
}

return ("OK");
