@Library('ctsrd-jenkins-scripts') _

class JobConfig {
	String buildArgs
	String testArgs
	String name = null
	static Object gitInfo = null
	static Object cheriCPUgitInfo = null


	// TODO: for some reason I can't make these globals, so let's just put them here
	static String clangArchiveName = 'cheri-multi-master-clang-llvm.tar.xz'
	static String clangJobName = 'CLANG-LLVM-master/CPU=cheri-multi,label=linux/'
	static String binutilsArchiveName = 'binutils.tar.bz2'
	static String binutilsJobName = 'CHERI-binutils/label=linux/'

}

// TODO: instead of this we could also have a Jenkinsfile per config and use JobDSL to generate one job per jenkinsfile
JobConfig getJobParameters() {
	String jobName = env.JOB_NAME
	if (jobName.contains('/')) {
		jobName = jobName.substring(0, jobName.indexOf('/'))
	}
	if (jobName.endsWith('-pipeline')) {
		jobName = jobName.substring(0, jobName.indexOf('-pipeline'))
	}
	echo "Computed base job names as $jobName"
	Map config = [
			"CHERI1-TEST": [buildArgs: 'CAP=True',
					testArgs: 'NOFUZZR=1 GENERIC_L1=1 STATCOUNTERS=1 SIM_TRACE_OPTS= nosetest_cached nosetest'],
			"CHERI1-CACHECORE-TEST": [
					buildArgs: 'CAP=True ICACHECORE=1 DCACHECORE=1',
					testArgs: 'NOFUZZR=1 GENERIC_L1=1 SIM_TRACE_OPTS= nosetest_cached'],
			"CHERI1-FPU-TEST": [
					buildArgs: 'CAP=True COP1=1',
					testArgs: 'TEST_FPU=1 CLANG=0 NOFUZZR=1 GENERIC_L1=1 SIM_TRACE_OPTS= nosetest_cached'],
			"CHERI1-CAP128-TEST": [
					buildArgs: 'CAP128=True',
					testArgs: 'GENERIC_L1=1 CAP_SIZE=128 PERM_SIZE=15 NOFUZZR=1 SIM_TRACE_OPTS= nosetest_cached nosetest'],
			"CHERI1-MICRO-TEST": [
					buildArgs: 'MICRO=True CAP=True NOWATCH=True',
					testArgs: 'CHERI_MICRO=1 NOFUZZR=1 SIM_TRACE_OPTS= nosetest_cached'],
			"CHERI1-MULTI1-TEST": [
					buildArgs: 'MULTI=1 CAP=True',
					testArgs: 'NOFUZZR=1 GENERIC_L1=1 SIM_TRACE_OPTS= nosetest_cached'],
			"CHERI1-MULTI2-TEST": [
					buildArgs: 'MULTI=2 CAP=True',
					testArgs: 'GENERIC_L1=1 MULTI=1 NOFUZZR=1 SIM_TRACE_OPTS= nosetests_cachedmulti.xml'],

			// BERI TESTS:

			"BERI1-TEST": [
					buildArgs: '',
					testArgs: 'TEST_CP2=0 GENERIC_L1=1 NOFUZZR=1 BERI=1 nosetest_cached'],

			"BERI1-MICRO-TEST": [
					buildArgs: 'MICRO=True NOWATCH=True',
					testArgs: 'TEST_CP2=0 CHERI_MICRO=1 NOFUZZR=1 WONTFIX=1 nosetest_cached'],

			"BERI1-MULTI1-TEST": [
					buildArgs: 'MULTI=1',
					testArgs: 'TEST_CP2=0 GENERIC_L1=1 NOFUZZR=1 SIM_TRACE_OPTS= nosetest_cached'],

			"BERI1-MULTI2-TEST": [
					buildArgs: 'MULTI=2',
					testArgs: 'MULTI=1 TEST_CP2=0 GENERIC_L1=1 NOFUZZR=1 SIM_TRACE_OPTS= nosetests_cachedmulti.xml'],

			"BERI1-MULTI2-TIMEBASED-TEST": [
					buildArgs: 'MULTI=2 TIMEBASED=1',
					testArgs: 'MULTI=1 TEST_CP2=0 GENERIC_L1=1 NOFUZZR=1 SIM_TRACE_OPTS= nosetests_cachedmulti.xml'],
	]
	Map result = config.get(jobName)
	if (!result) {
		error("No configuration found for job ${jobName}! Please add one to the Map above")
	}
	result.name = jobName
	return result as JobConfig
}


def runTests(JobConfig args, String assembler) {
	def prepareAssembler = ''
	def assemblerTestFlag = ''
	if (assembler == 'clang') {
		assemblerTestFlag = 'CLANG=1 CHERI_SDK=\$WORKSPACE/cherisdk'
		prepareAssembler = """
mkdir -p cherisdk
tar Jxf ${args.clangArchiveName} --strip-components 1 -C cherisdk
export CHERI_SDK=\$WORKSPACE/cherisdk"""
	} else {
		prepareAssembler = """
tar xjf ${args.binutilsArchiveName}
export PATH=\$WORKSPACE/binutils/bin:\$PATH"""
		assemblerTestFlag = 'CLANG=0'
	}
	stage("Tests (${assembler})") {
		sh """#!/bin/bash
set -xe
cd \$WORKSPACE
${prepareAssembler}

. /local/ecad/setup.bash \$QUARTUS_DEFAULT
cd \$WORKSPACE/cheritest
export "CHERI_CPU_GIT_ROOT=\$WORKSPACE/cheri-cpu"
# always do a full clean in case the linker/compiler has changed
make distclean
rm -f nose*.xml
make PYTHON_TESTRUNNER=pytest ${assemblerTestFlag} ${args.testArgs} -j16
"""
		// JUnit Results
		junit 'cheritest/nosetests_*.xml'
	}
}

def doBuild(JobConfig args) {
	if (args.name.startsWith('BERI')) {
		if (!args.testArgs.contains('TEST_CP2=0')) {
			error("BERI tests need TEST_CP2=0 set")
			return
		}
	}
	timeout(240) {
		copyArtifacts filter: args.binutilsArchiveName, fingerprintArtifacts: true, projectName: args.binutilsJobName
		// Use lastCompleted() here to also pull yellow builds
		copyArtifacts filter: args.clangArchiveName, fingerprintArtifacts: true, projectName: args.clangJobName, selector: lastWithArtifacts()
		stage('Build Simulator') {
			// NOPRINTS=1 might to be required for successful builds? At least for CACHECORE
			// This should speed up running the tests:
			args.buildArgs += ' NOPRINTS=1'
			// NOT_FLAT speeds up incremental builds but it might slow down the simulator
			// args.buildArgs += ' NOT_FLAT=1'
			sh '''#!/bin/bash
set -xe
. /local/ecad/setup.bash \$QUARTUS_DEFAULT

#export PATH=\$WORKSPACE/binutils/bin:\$CHERITEST_TOOL_PATH:$PATH
cd cheri-cpu/cheri
# make clean
rm -f sim sim.so
# build the simulator
''' + "make ${args.buildArgs} sim || (make clean ; make ${args.buildArgs} sim)"
			archiveArtifacts allowEmptyArchive: false, artifacts: 'cheri-cpu/cheri/sim, cheri-cpu/cheri/sim.so, cheri-cpu/cheri/sim.dtb, cheri-cpu/cheri/build_*_sim/sim, cheri-cpu/cheri/build_*_sim/sim.so, cheri-cpu/cheri/build_*_sim/sim.dtb, cheri-cpu/cherilibs/peripherals/*.so, cheri-cpu/cherilibs/tools/memConv.py', caseSensitive: true, defaultExcludes: true, excludes: 'cheritest/**/*', fingerprint: false, onlyIfSuccessful: true
		}
		// timeout(90) {
		if (false) {
			try {
				// don't fail the job if binutils fails to compile the tests
				runTests(args, "binutils")
			} catch (error) {
				echo "Binutils failed to compile tests ${error}"
				currentBuild.result = 'UNSTABLE'
				emailext attachLog: false, body: "Binutils failed to compile tests: (see ${env.BUILD_URL}): ${error}", subject: "[JENKINS] ${env.JOB_NAME} (binutils) failed", to: 'Michael.Roe@cl.cam.ac.uk'
			}
		}
		timeout(90) {
			runTests(args, "clang")
		}
		warnings canComputeNew: false, canResolveRelativePaths: false, consoleParsers: [[parserName: 'Clang (LLVM based)']]
	}
}

def cheriHardwareTest() {
	node('bluespec') {
		echo "Computing job parameters for ${env.JOB_NAME}"
		JobConfig args = getJobParameters()
		echo "Found job config: BUILD_ARGS: '${args.buildArgs}'\nTEST_ARGS: '${args.testArgs}'"
		stage('Checkout') {
			// dir('cheritest') { git url: 'git@github.com:CTSRD-CHERI/cheritest.git', credentialsId: 'cheritest_key', branch: 'master'}
			dir('cheritest') {
				args.gitInfo = checkout scm  // get the sources from git
			}
			def cheriCpuGitOptions = [ changelog: true, poll: true,
				scm: [$class: 'GitSCM',
					  doGenerateSubmoduleConfigurations: false,
					  branches: [[name: "refs/heads/master"]],
					  extensions: [/* to skip polling: [$class: 'IgnoreNotifyCommit'], */
						[$class: 'CloneOption', noTags: false, reference: '/var/tmp/git-reference-repos/cheri-cpu', shallow: false, depth: 10, timeout: 60],
						[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false],
					],
					userRemoteConfigs: [[url: 'https://github.com/CTSRD-CHERI/cheri-cpu', credentialsId: 'ctsrd-jenkins-new-github-api-key']]
				]
			]
			dir('cheri-cpu') {
				// git credentialsId: 'ctsrd-jenkins-new-github-api-key', url: 'https://github.com/CTSRD-CHERI/cheri-cpu'
				JobConfig.cheriCPUgitInfo = checkout cheriCpuGitOptions
			}
		}
		try {
			setGitHubStatus(args.gitInfo) // set PENDING status
			doBuild(args)
		} catch (e) {
			error("Failure detected: ${e}")
		} finally {
			echo("result = ${currentBuild.result} currentResult = ${currentBuild.currentResult}")
			// it seems like the currentBuild.Result will always be null (PENDING) unless I set it explicitly here
			if (currentBuild.result == null)
				currentBuild.result = currentBuild.currentResult
			// Avoid setting an error flag on github commits just because binutils is still broken
			echo("final result = ${currentBuild.result} currentResult = ${currentBuild.currentResult}")
			if (JobConfig.gitInfo != null)
				setGitHubStatus(JobConfig.gitInfo)
			// Also set the status on the CheriCPU repo
			if (JobConfig.cheriCPUgitInfo != null)
				setGitHubStatus(JobConfig.cheriCPUgitInfo)
		}
	}
}

try {
	properties([
			pipelineTriggers([
					githubPush(),
					pollSCM('@daily')
			]),
			[$class: 'JobPropertyImpl', throttle: [count: 2, durationName: 'day', userBoost: true]],
			disableConcurrentBuilds(),
			[$class: 'CopyArtifactPermissionProperty', projectNames: '*'],
	])
	cheriHardwareTest()
} catch (e) {
	error(e.toString())
	emailext body: '$DEFAULT_CONTENT', recipientProviders: [culprits(), brokenBuildSuspects(), brokenTestsSuspects(), requestor()], subject: '$DEFAULT_SUBJECT'
} finally {
}
