#-
# Copyright (c) 2012 Robert M. Norton
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# Test jump register instructions with optional link. Test some
# different (small) offsets. The test is centered around the
# instruction labelled 'branch', which targets the one labelled
# 'target' (except for some small offsets). Padding is added before
# or after the branch to acheive the correct spacing. s0-s4 are used
# to keep track of the path taken.

$params_str

.set mips64
.set noreorder
.set nobopt
.set noat

.global test
test:   .ent    test
	daddu   $$sp, -16
	sd	$$ra, 0($$sp)
	sd      $$fp, 8($$sp)
	daddu   $$fp, $$sp, 16
	dla     $targetreg, branch
	dadd    $targetreg, $offset
	dla     $$t0, target
.if  ($offset<=-20) && ($offset>=20)
	bne     $targetreg, $$t0, .     # Simple check that we got the amount of padding right
.endif
	li      $$s0, 0
	li      $$s1, 0
	li      $$s2, 0
	li      $$s3, 0
	li      $$s4, 0

.if $offset < 0
    	j       branch			# Skip over the padding to save time
	add     $$s0, 1			# Branch delay
	add     $$s1, 1			# Not executed
target:	add     $$s2, 1			# should land here (offset<0)
	j	out   			# Skip to end of test
	add     $$s3, 1			# Branch delay
.rept   -($offset)/4 -3			# Might be < 0 for some offsets i.e. no padding
	j	.			# Padding (minefield, not executed)
.endr
.endif # $offset < 0
.if $link
branch:	JALR    $destreg, $targetreg
.else
branch:	JR      $targetreg
.endif
	add     $$s4, 1  		# Delay slot, executed twice if offset==4!
.if $offset > 0
	j       target			# Skip over the padding to save time
	add	$$s0, 1			# Branch delay
.rept  ($offset)/4 - 5			# Might be < 0 for some offsets i.e. no padding
	j	.      	 	    	# Padding (minefield, not executed)
.endr
	add     $$s1, 1			# Not executed except when offset is 3 or 4
target:	add     $$s2, 1			# should land here (offset>0)
.endif # $offset > 0
out:	move    $$a1, $destreg		# Hide away the value of ra from the branch
	ld      $$ra, 0($$sp)
	ld      $$fp, 8($$sp)
	jr      $$ra
	daddu   $$sp, 16
.end    test
